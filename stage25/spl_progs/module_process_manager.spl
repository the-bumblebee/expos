// MODULE 1 - PROCESS MANAGER
alias funcNum R1;
alias currentPID R2;

if (funcNum == FREE_USER_AREA_PAGE) then
    // Deallocating the UAPage
    call FreeUserAreaPage;
endif;

if (funcNum == EXIT_PROCESS) then
    call ExitProcess;
endif;

if (funcNum == FREE_PAGE_TABLE) then
    // Deallocating stack, code, heap pages
    call FreePageTable;
endif;

if (funcNum == GET_PCB_ENTRY) then
    call GetPcbEntry;
endif;

if (funcNum == KILL_ALL) then
    call KillAll;
endif;

return;

FreeUserAreaPage:
    // Release Semaphore for every valid semaphore resource
    alias resourceTable R3;
    alias resourceIndex R4;
    resourceTable = [PROCESS_TABLE + (currentPID * 16) + 11] * 512 + RESOURCE_TABLE_OFFSET;
    resourceIndex = 0;
    while (resourceIndex < 8) do
        if ([resourceTable + 2 * resourceIndex] == SEMAPHORE) then
            multipush(R2, R3, R4);
            R1 = RELEASE_SEMAPHORE;
            R2 = resourceIndex;
            R3 = currentPID;
            call RESOURCE_MANAGER;
            multipop(R2, R3, R4);
        else
            if ([resourceTable + 2 * resourceIndex] == FILE) then
                multipush (R2, R3, R4);
                R1 = CLOSE;
                R2 = [resourceTable + 2 * resourceIndex + 1];
                call FILE_MANAGER;
                multipop (R2, R3, R4);
            endif;
        endif;
        resourceIndex = resourceIndex + 1;
    endwhile;

    // R1-> Release Page function number (2), R2 -> UAPage number
    multipush (R1, R2);
    R1 = RELEASE_PAGE;
    R2 = [PROCESS_TABLE + (currentPID * 16) + 11];
    call MEMORY_MANAGER;
    multipop (R1, R2);
    return;

FreePageTable:
    // Invalidating library pages
    [PTBR + 0] = -1;
    [PTBR + 1] = "0000";
    [PTBR + 2] = -1;
    [PTBR + 3] = "0000";
    alias logicalPage R3;
    logicalPage =  2;
    // Invalidating stack, code, heap pages
    while (logicalPage < 10) do
        if ([PAGE_TABLE_BASE + (currentPID * 20) + 2 * logicalPage] != -1) then
            multipush (R1, R2, R3);
            R1 = RELEASE_PAGE;
            R2 = [PAGE_TABLE_BASE + (currentPID * 20) + 2 * logicalPage];
            call MEMORY_MANAGER;
            multipop (R1, R2, R3);
            [PAGE_TABLE_BASE + (currentPID * 20) + 2 * logicalPage] = -1;
            [PAGE_TABLE_BASE + (currentPID * 20) + 2 * logicalPage + 1] = "0000";
        endif;
        logicalPage = logicalPage + 1;
    endwhile;

    // Go through stack, heap of Disk Map table of current PID
    // Invalidate all entries
    alias diskMapEntry R3;
    alias index R4;
    diskMapEntry = DISK_MAP_TABLE + (currentPID * 10);
    index = 2;
    while (index < 10) do

        if ([diskMapEntry + index] != -1 && (index < 4 || index > 7)) then
            multipush (R1, R2, R3);
            R2 = [diskMapEntry + index];
            R3 = [SYSTEM_STATUS_TABLE + 1];
            R1 = RELEASE_BLOCK;
            call MEMORY_MANAGER;
            multipop (R1, R2, R3);
        endif;

        [diskMapEntry + index] = -1;

        index = index + 1;
    endwhile;

    return;

GetPcbEntry:
    alias PID R2;
    alias processTable R3;
    alias retVal R0;
    PID = 1;
    processTable = PROCESS_TABLE + (PID * 16);
    while ([processTable + 4] != TERMINATED && PID != 0) do
        PID = (PID + 1) % 16;
        processTable = PROCESS_TABLE + (PID * 16);
    endwhile;

    if (PID == 0) then
        retVal = -1;
        return;
    endif;

    [processTable + 1] = PID;
    [processTable + 4] = ALLOCATED;
    [processTable + 14] = PAGE_TABLE_BASE + (PID * 20);
    [processTable + 15] = 10;

    retVal = PID;
    return;

ExitProcess:
    // Deallocating stack, code, heap pages and also the user area page.
    alias currentPID R2;
    call FreePageTable;
    call FreeUserAreaPage;
    // Changing STATE to TERMINATED
    [PROCESS_TABLE + (currentPID * 16) + 4] = TERMINATED;
    if ([PROCESS_TABLE + (currentPID * 16) + 9] != INT_EXEC) then
        alias exitPID R3;
        exitPID = 1;
        while (exitPID < 16) do
            if ([PROCESS_TABLE + (exitPID * 16) + 4] == WAIT_PROCESS && [PROCESS_TABLE + (exitPID * 16) + 5] == currentPID) then
                [PROCESS_TABLE + (exitPID * 16) + 4] = READY;
            endif;
            if ([PROCESS_TABLE + (exitPID * 16) + 2] == currentPID) then
                [PROCESS_TABLE + (exitPID * 16) + 2] = -1;
            endif;
            exitPID = exitPID + 1;
        endwhile;
    endif;
    return;

KillAll:
    // Acquire all files
    alias inodeIndex R3;
    inodeIndex = 0;
    while (inodeIndex < MAX_FILE_NUM) do
        if ([INODE_TABLE + (inodeIndex * 16) + 1] != -1) then
            multipush (R1, R2, R3);
            R1 = ACQUIRE_INODE;
            R2 = inodeIndex; // R3
            R3 = [SYSTEM_STATUS_TABLE + 1];
            call RESOURCE_MANAGER;
            multipop (R1, R2, R3);
        endif;
        inodeIndex = inodeIndex + 1;
    endwhile;

    // Terminate processes
    alias PID R3;
    PID = 2; // Idle and Init not needed
    while (PID < MAX_PROC_NUM) do
        if (PID != [SYSTEM_STATUS_TABLE + 1] && [PROCESS_TABLE + (PID * 16) + 4] != TERMINATED) then
            multipush (R1, R2, R3);
            R1 = EXIT_PROCESS;
            R2 = PID; // R3
            call PROCESS_MANAGER;
            multipop (R1, R2, R3);
        endif;
        PID = PID + 1;
    endwhile;

    // Release alll files
    alias inodeIndex R3;
    inodeIndex = 0;
    while (inodeIndex < MAX_FILE_NUM) do
        if ([INODE_TABLE + (inodeIndex * 16) + 1] != -1) then
            multipush (R1, R2, R3);
            R1 = RELEASE_INODE;
            R2 = inodeIndex; // R3
            R3 = [SYSTEM_STATUS_TABLE + 1];
            call RESOURCE_MANAGER;
            multipop (R1, R2, R3);
        endif;
        inodeIndex = inodeIndex + 1;
    endwhile;

    return;