// INTERRUPT 7 - WRITE SYSTEM CALL

alias userSP R0;
userSP = SP;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = INT_WRITE;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = userSP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 - 1;

alias physicalPageNum R1;
alias offset R2;
alias fileDescPhysicalAddr R3;


physicalPageNum = [PTBR + 2 * ((userSP - 4)/ 512)];
offset = (userSP - 4) % 512;
fileDescPhysicalAddr = (physicalPageNum * 512) + offset;
alias fileDescriptor R4;
fileDescriptor=[fileDescPhysicalAddr];

// Checking if file descriptor valid
if (fileDescriptor != -2) then
    alias physicalAddrRetVal R5;
    physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
    [physicalAddrRetVal] = -1;
else
    // Prints the second argument (userSP - 3) to terminal
    alias word R5;
    word = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + ((userSP - 3) % 512)];
    
    multipush(R0, R1, R2, R3, R4, R5);
    R1 = TERMINAL_WRITE;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = word;
    call DEVICE_MANAGER;
    multipop(R0, R1, R2, R3, R4, R5);

    // Return value indicating success
    alias physicalAddrRetVal R6;
    physicalAddrRetVal = ([PTBR + 2 * (userSP - 1)/ 512] * 512) + ((userSP - 1) % 512);
    [physicalAddrRetVal] = 0;

endif;


SP = userSP;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
ireturn;