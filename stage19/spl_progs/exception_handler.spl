// EXCEPTION HANDLER

// Set MODE flag to -1
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = -1;
// Save user SP
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
// Change to kernel stack
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

// Backup user context
backup;
multipush (EIP);

// If not page fault
if (EC != 0) then
    print EC;
    print "Exception!";
    R1 = EXIT_PROCESS;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    call PROCESS_MANAGER;
    call SCHEDULER;
endif;

breakpoint;
// Page fault due to code page
if (EPN > 4 && EPN < 8) then
    multipush (EPN);
    R1 = GET_CODE_PAGE;
    R2 = [DISK_MAP_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 10) + EPN];
    call MEMORY_MANAGER;
    multipop (EPN);
    
    [PTBR + (2 * EPN)] = R0;
    [PTBR + (2 * EPN) + 1] = "1100";

endif;

// Page fault due to heap page
if (EPN == 2 || EPN == 3) then
    multipush (EPN);
    R1 = GET_FREE_PAGE;
    call MEMORY_MANAGER;

    [PTBR + (2 * EPN)] = R0;
    [PTBR + (2 * EPN) + 1] = "1110";

    R1 = GET_FREE_PAGE;
    call MEMORY_MANAGER;
    multipop (EPN);

    [PTBR + (2 * (EPN + 1))] = R0;
    [PTBR + (2 * (EPN + 1)) + 1] = "1110";

endif;

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;

multipop(EIP);

restore;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];
SP = SP + 1;
[[PTBR + (2 * (SP / 512))]*512 + (SP % 512)] = EIP;
ireturn;