//scheduler
//MOD 5
alias current_pid R0;
alias current_process R1;
alias new_process R2;
alias new_pid R3;
alias pid_itr R4;
alias flag R5;

print "SCHEDULER";

current_pid = [SYSTEM_STATUS_TABLE+1];
print current_pid;
multipush (BP);
current_process = PROCESS_TABLE + 16*current_pid;
[current_process + 12] = SP % 512;
[current_process + 14] = PTBR;
[current_process + 15] = PTLR;
//round robin
pid_itr=1;
flag = 0;

while (pid_itr<16) do
    pid_itr = pid_itr + 1;
    current_pid=(current_pid+1)%16;
    // print "loop";
    // print current_pid;
    if (current_pid!=0) then
        if ([PROCESS_TABLE + current_pid*16 + 4] !="TERMINATED" ) then
            flag = 1;
            break;
        endif;
    endif;
endwhile;
if(flag == 0) then 
    current_pid = 0;
endif;
new_pid = current_pid;
print "new pid";
print new_pid;
[SYSTEM_STATUS_TABLE + 1] = new_pid;
print "status";
print [SYSTEM_STATUS_TABLE + 1];
new_process = PROCESS_TABLE + 16*new_pid;

//Set back Kernel SP, PTBR , PTLR
SP =  [new_process + 11] * 512 + [new_process + 12] ;
PTBR = [new_process + 14];
PTLR = [new_process + 15];

print [new_process + 4]; 

if([new_process + 4] == "CREATED") then
	[new_process + 4] = "RUNNING";
    SP = [new_process + 13];
    [new_process + 9] = 0;      //MODE_FLAG
    print "CREATED";
    print [SYSTEM_STATUS_TABLE + 1];
	ireturn;
endif;

[new_process + 4] = "RUNNING";
multipop (BP);
return;