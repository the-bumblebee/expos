// MODULE 7 - BOOT MODULE

// Inode Table
loadi(59, 3);
loadi(60, 4);

// Root File
loadi(62, 5);

// Disk Free List
loadi(61, 2);


// Interrupt 4
loadi(10, 23);
loadi(11, 24);

// Interrupt 5
loadi(12, 25);
loadi(13, 26);

// Interrupt 6 (Read)
loadi(14, 27);
loadi(15, 28);

// Interrupt 7 (Write)
loadi(16,29);
loadi(17,30);

// Interrupt 8 (Fork)
loadi(18, 31);
loadi(19, 32);

// Interrupt 9 (Exec)
loadi(20, 33);
loadi(21, 34);

// Interrupt 10 (Exit)
loadi(22,35);
loadi(23,36);

// Interrupt 11
loadi(24, 37);
loadi(25, 38);

// Interrupt 12 (Logout)
loadi(26, 39);
loadi(27, 40);

// Interrupt 13
loadi(28, 41);
loadi(29, 42);

// Interrupt 14
loadi(30, 43);
loadi(31, 44);

// Interrupt 15 (Shutdown)
loadi(32, 45);
loadi(33, 46);

// Interrupt 16
loadi(34, 47);
loadi(35, 48);

// Interrupt 17 (Login - 37, 38 to 24, 25)
loadi(36, 49);
loadi(37, 50);


// Exception Handler
loadi(2, 15);
loadi(3, 16);

// Timer Interrupt Routine
loadi(4, 17);
loadi(5, 18);

// Console Interrupt Handler
loadi(8, 21);
loadi(9, 22);

// Disk Interrupt Handler
loadi(6, 19);
loadi(7, 20);


// Module 0 (Device Manager)
loadi(48,61);
loadi(49,62);

// Module 1 (Process Manager)
loadi(42, 55);
loadi(43, 56);

// Module 2 (Memory Manager)
loadi(44, 57);
loadi(45, 58);

// Module 3 (File Manager)
loadi(46, 59);
loadi(47, 60);

// Module 4 (Resource Manager)
loadi(40,53);
loadi(41,54);

// Modulle 5 (Scheduler)
loadi(50,63);
loadi(51,64);


// Library Code
loadi(63,13);
loadi(64,14);

// Login Process (Init)
loadi(65,7);

// Shell Process
loadi(67, 9);
loadi(68, 10);


// STATUS fields in Terminal and Disk Status Table
[TERMINAL_STATUS_TABLE] = 0;
[DISK_STATUS_TABLE] = 0;


// Initializing Semaphore Table
alias semTableIndex R0;
semTableIndex = 0;
while(semTableIndex < 32) do
    [SEMAPHORE_TABLE + 4 * semTableIndex] = -1;
    [SEMAPHORE_TABLE + 4 * semTableIndex + 1] = 0;
    semTableIndex = semTableIndex + 1;
endwhile;

// Initialize File Status Table
alias fileStatusTableIndex R0;
fileStatusTableIndex = 0;
while (fileStatusTableIndex < MAX_FILE_NUM) do
    [FILE_STATUS_TABLE + (fileStatusTableIndex * 2)] = -1;
    [FILE_STATUS_TABLE + (fileStatusTableIndex * 2) + 1] = -1;
    fileStatusTableIndex  = fileStatusTableIndex + 1;
endwhile;

// Initialize Buffer Table
alias bufferIndex R0;
bufferIndex = 0;
while (bufferIndex < MAX_BUFFER) do
    [BUFFER_TABLE + (bufferIndex * 4)] = -1;
    [BUFFER_TABLE + (bufferIndex * 4) + 1] = 0;
    [BUFFER_TABLE + (bufferIndex * 4) + 2] = -1;
    bufferIndex = bufferIndex + 1;
endwhile;

// Initialize Open File Table
alias openFileIndex R0;
openFileIndex = 0;
while (openFileIndex < MAX_OPENFILE_NUM) do
    [OPEN_FILE_TABLE + (openFileIndex * 4)] = -1;
    [OPEN_FILE_TABLE + (openFileIndex * 4) + 1] = 0;
    openFileIndex = openFileIndex + 1;
endwhile;


// Setting Page Table entry for init program
// Code: 65     Heap: -    Stack: 66, -   UArea page: 77 // 2nd code page used as stack
PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;
//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";
//Heap
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";
//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";
//Stack
[PTBR+16] = 66;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";

//Process table for init
// PID = 1, USERID = ROOT, STATE = CREATED, UAPage = 77, KPTR = 0, UPTR = 8*512, PTBR, PTLR
alias initProcessTable R0;
initProcessTable = PROCESS_TABLE + (16 * 1);
[initProcessTable + 1] = 1;
[initProcessTable + 3] = KERNEL;
[initProcessTable + 4] = CREATED;
[initProcessTable + 11] = 77;
[initProcessTable + 12] = 0;
[initProcessTable + 13] = 8 * 512;
[initProcessTable + 14] = PTBR;
[initProcessTable + 15] = PTLR;

// Per-Process Table for init, UAPage: 77
alias perProcessEntry R0;
perProcessEntry = 0;
while (perProcessEntry < 8) do
    [77 * 512 + RESOURCE_TABLE_OFFSET + (2 * perProcessEntry)] = -1;
    perProcessEntry = perProcessEntry + 1;
endwhile;

//Setting entry point for init
[66*512] = [65*512 + 1];

// Setting Page Table entry for shell
// Code: 67, 68     Heap: -    Stack: 78, 79    UArea page: 80
PTBR = PAGE_TABLE_BASE + 20 * 2;
PTLR = 10;
//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";
//Heap
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";
//Code
[PTBR+8] = 67;
[PTBR+9] = "0100";
[PTBR+10] = 68;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";
//Stack
[PTBR+16] = 78;
[PTBR+17] = "0110";
[PTBR+18] = 79;
[PTBR+19] = "0110";

//Process table for shell
// PID = 2, PPID = 1, STATE = TERMINATED, UAPage = 80, KPTR = 0, UPTR = 8*512, PTBR, PTLR
alias shellProcessTable R0;
shellProcessTable = PROCESS_TABLE + (16 * 2);
[shellProcessTable + 1] = 2;
[shellProcessTable + 2] = 1;
[shellProcessTable + 3] = KERNEL;
[shellProcessTable + 4] = TERMINATED;
[shellProcessTable + 11] = 80;
[shellProcessTable + 12] = 0;
[shellProcessTable + 13] = 8 * 512;
[shellProcessTable + 14] = PTBR;
[shellProcessTable + 15] = PTLR;

//Setting entry point for shell
[78 * 512] = [67 * 512 + 1];

// Per-Process Table for shell, UAPage: 80
alias perProcessEntry R0;
perProcessEntry = 0;
while (perProcessEntry < 8) do
    [80 * 512 + RESOURCE_TABLE_OFFSET + (2 * perProcessEntry)] = -1;
    perProcessEntry = perProcessEntry + 1;
endwhile;

// Disk Map Table of shell
alias diskMapEntry R0;
diskMapEntry = DISK_MAP_TABLE + (2 * 10);
alias i R1;
i = 0;
while (i < 10) do
    [diskMapEntry + i] = -1;
    i = i + 1;
endwhile;
[diskMapEntry + 4] = 9;
[diskMapEntry + 5] = 10;


// Initializing the Memory Free List
alias page R0;
page = 0;
while (page <= 80) do
    [MEMORY_FREE_LIST + page] = 1;
    page = page + 1;
endwhile;
while (page < 128) do
    [MEMORY_FREE_LIST + page] = 0;
    page = page + 1;
endwhile;

// USERID, CURRENT PROCESS, WAIT MEM COUNT, MEM FREE COUNT
[SYSTEM_STATUS_TABLE] = KERNEL;
[SYSTEM_STATUS_TABLE + 1] = IDLE_PROCESS;
[SYSTEM_STATUS_TABLE + 3] = 0;
[SYSTEM_STATUS_TABLE + 2] = 47;


// STATE of remaining processes TERMINATED
alias index R0;
index = 3;
while (index < MAX_PROC_NUM) do
    [PROCESS_TABLE + (16 * index) + 4] = TERMINATED;
    index = index + 1;
endwhile;

return;