// MODULE 1 - PROCESS MANAGER
alias funcNum R1;
alias currentPID R2;

// Checking to see if function number is 2 for Free User Area PAge
if (funcNum == FREE_USER_AREA_PAGE) then
    // Deallocating the UAPage
    call FreeUserAreaPage;
    return;
endif;

// Checking to see if function number is 3 for Exit Process
if (funcNum == EXIT_PROCESS) then
    // Deallocating stack, code, heap pages and also the user area page.
    call FreePageTable;
    call FreeUserAreaPage;
    // Changing STATE to TERMINATED
    [PROCESS_TABLE + (currentPID * 16) + 4] = TERMINATED;
    return;
endif;

// Checking to see if function number is 4 for Free Page Table
if (funcNum == FREE_PAGE_TABLE) then
    // Deallocating stack, code, heap pages
    call FreePageTable;
    return;
endif;

// Return if wrong function number
return;

FreeUserAreaPage:
    multipush (R1, R2);
    // R1-> Release Page function number (2), R2 -> UAPage number
    R1 = RELEASE_PAGE;
    R2 = [PROCESS_TABLE + (currentPID * 16) + 11];
    call MEMORY_MANAGER;
    multipop (R1, R2);
    return;

FreePageTable:
    // Invalidating library pages
    [PTBR + 0] = -1;
    [PTBR + 1] = "0000";
    [PTBR + 2] = -1;
    [PTBR + 3] = "0000";
    alias logicalPage R3;
    logicalPage =  2;
    // Invalidating stack, code, heap pages
    while (logicalPage < 10) do
        if ([PAGE_TABLE_BASE + (currentPID * 20) + 2 * logicalPage] != -1) then
            multipush (R1, R2, R3);
            R1 = RELEASE_PAGE;
            R2 = [PAGE_TABLE_BASE + (currentPID * 20) + 2 * logicalPage];
            call MEMORY_MANAGER;
            multipop (R1, R2, R3);
            [PAGE_TABLE_BASE + (currentPID * 20) + 2 * logicalPage] = -1;
            [PAGE_TABLE_BASE + (currentPID * 20) + 2 * logicalPage + 1] = "0000";
        endif;
        logicalPage = logicalPage + 1;
    endwhile;
    return;