// MODULE 7 - BOOT MODULE

// Loads library code from disk blocks 13 and 14 to physical pages 63 and 64
loadi(63,13);
loadi(64,14);

// Loads INIT program from 7, 8 blocks to 65, 66 physical pages
loadi(65,7);
loadi(66,8);

// Loads interrupt routine 10 from 35, 36 blocks to 22, 23 physical pages
loadi(22,35);
loadi(23,36);
// Loads exception handler from 15, 16 blocks to 2, 3 physical pages
loadi(2, 15);
loadi(3, 16);

// Loads timer interrupt routine from 17, 18 blocks to 4, 5 physical pages
loadi(4, 17);
loadi(5, 18);

// Loads Interrupt 7 Routine (Write) from 29, 30 blocks to 16, 17 physical pages
loadi(16,29);
loadi(17,30);

// Loads scheduler (Module 5) from 63, 64 to 50, 51
loadi(50,63);
loadi(51,64);

// Loads Resource Manager Module (Module 4) from disk blocks 53, 54 to pages 40, 41
loadi(40,53);
loadi(41,54);

// Loads Device Manager Module (Module 0) from disk blocks 61, 62 to pages 48, 49
loadi(48,61);
loadi(49,62);

// Loads the Console Interrupt Handler from disk blocks 21, 22 to pages 8, 9
loadi(8, 21);
loadi(9, 22);

// Loads the Interrupt 6 Routine (Read) from disk blocks 27, 28 to pages 14, 15
loadi(14, 27);
loadi(15, 28);

// Loading inode table
loadi(59, 3);
loadi(60, 4);

// Loads the Exec System Call (Interrupt 9) from blocks 33, 34 to pages 20, 21
loadi(20, 33);
loadi(21, 34);

// Loads Process Manager Module (Module 1) from blocks 55, 56 to pages 42, 43
loadi(42, 55);
loadi(43, 56);

// Loads Memory Manager Module (Module 2) from blocks 57, 58 to pages 44, 45
loadi(44, 57);
loadi(45, 58);

// Loads Disk Interrupt Handler from blocks 19, 20 to pages 6, 7
loadi(6, 19);
loadi(7, 20);

// Load Disk Free List from block 2 to page 61
loadi(61, 2);

// Fork- 31,32 to 18, 19
loadi(18, 31);
loadi(19, 32);

// Int 11 - 37, 38 to 24, 25
loadi(24, 37);
loadi(25, 38);

// SHutdown - 45, 46 to 32, 33
loadi(32, 45);
loadi(33, 46);

// Interrupt 13 - 41, 42 to 28, 29
loadi(28, 41);
loadi(29, 42);

// Interrupt 14 - 43, 44 to 30, 31
loadi(30, 43);
loadi(31, 44);

// Initializing STATUS field in Disk Status Table as 0
[DISK_STATUS_TABLE] = 0;

// Initializing STATUS field in Terminal Status Table as 0
[TERMINAL_STATUS_TABLE] = 0;

// Initializing Semaphore Table
alias semTableIndex R0;
semTableIndex = 0;
while(semTableIndex < 32) do
    [SEMAPHORE_TABLE + 4 * semTableIndex] = -1;
    [SEMAPHORE_TABLE + 4 * semTableIndex + 1] = 0;
    semTableIndex = semTableIndex + 1;
endwhile;

// Initializing the Memory Free List
alias page R0;
page = 0;
while (page <= 82) do
    [MEMORY_FREE_LIST + page] = 1;
    page = page + 1;
endwhile;

// Setting the MEM_FREE_COUNT field in the System Status Table
[SYSTEM_STATUS_TABLE + 2] = NUM_MEM_PAGES - 83;

// Setting Page Table entry for init program
// Memory pages:
// Code: 65, 66     Heap: 78, 79    Stack: 76, 77   UArea page: 80
PTBR = PAGE_TABLE_BASE + 20;
//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";
//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";
//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";
//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

//Process table for init
// Setting PID to 1
[PROCESS_TABLE + (16 * 1) + 1] = 1;
// Setting STATE to CREATED
[PROCESS_TABLE + (16 * 1) + 4] = CREATED;
//Setting User page area to 80
[PROCESS_TABLE + (16 * 1) + 11] = 80;
//Setting KPTR to 0
[PROCESS_TABLE + (16 * 1) + 12] = 0;
//Setting UPTR to 8*512
[PROCESS_TABLE + (16 * 1) + 13] = 8 * 512;
//Setting PTBR
[PROCESS_TABLE + (16 * 1) + 14] = PTBR;
//Setting PTLR
[PROCESS_TABLE + (16 * 1) + 15] = 10;

//Setting entry point for init
[76*512] = [65*512 + 1];

// Initialize Disk Map Table of init
alias diskMapEntry R0;
diskMapEntry = DISK_MAP_TABLE + (1 * 10);
alias i R1;
i = 0;
while (i < 10) do
    [diskMapEntry + i] = -1;
    i = i + 1;
endwhile;


// Initializing the Pre-Process Table for init, UAPage: 80
alias preProcessEntry R0;
preProcessEntry = 0;
while (preProcessEntry < 8) do
    [80 * 512 + (512 - 16) + (2 * preProcessEntry)] = -1;
    preProcessEntry = preProcessEntry + 1;
endwhile;


// Setting the STATE field of the rest of
// Process Table entries to TERMINATED
alias index R0;
index = 2;
while (index <= 15) do
    [PROCESS_TABLE + (16 * index) + 4] = TERMINATED;
    index = index + 1;
endwhile;

return;