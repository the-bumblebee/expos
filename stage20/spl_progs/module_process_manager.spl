// MODULE 1 - PROCESS MANAGER
alias funcNum R1;
alias currentPID R2;

// Checking to see if function number is 2 for Free User Area PAge
if (funcNum == FREE_USER_AREA_PAGE) then
    // Deallocating the UAPage
    call FreeUserAreaPage;
    return;
endif;

// Checking to see if function number is 3 for Exit Process
if (funcNum == EXIT_PROCESS) then
    // Deallocating stack, code, heap pages and also the user area page.
    call FreePageTable;
    call FreeUserAreaPage;
    // Changing STATE to TERMINATED
    [PROCESS_TABLE + (currentPID * 16) + 4] = TERMINATED;
    return;
endif;

// Checking to see if function number is 4 for Free Page Table
if (funcNum == FREE_PAGE_TABLE) then
    // Deallocating stack, code, heap pages
    call FreePageTable;
    return;
endif;

if (funcNum == GET_PCB_ENTRY) then
    call GetPcbEntry;
    return;
endif;

// Return if wrong function number
return;

FreeUserAreaPage:
    multipush (R1, R2);
    // R1-> Release Page function number (2), R2 -> UAPage number
    R1 = RELEASE_PAGE;
    R2 = [PROCESS_TABLE + (currentPID * 16) + 11];
    call MEMORY_MANAGER;
    multipop (R1, R2);
    return;

FreePageTable:
    // Invalidating library pages
    [PTBR + 0] = -1;
    [PTBR + 1] = "0000";
    [PTBR + 2] = -1;
    [PTBR + 3] = "0000";
    alias logicalPage R3;
    logicalPage =  2;
    // Invalidating stack, code, heap pages
    while (logicalPage < 10) do
        if ([PAGE_TABLE_BASE + (currentPID * 20) + 2 * logicalPage] != -1) then
            multipush (R1, R2, R3);
            R1 = RELEASE_PAGE;
            R2 = [PAGE_TABLE_BASE + (currentPID * 20) + 2 * logicalPage];
            call MEMORY_MANAGER;
            multipop (R1, R2, R3);
            [PAGE_TABLE_BASE + (currentPID * 20) + 2 * logicalPage] = -1;
            [PAGE_TABLE_BASE + (currentPID * 20) + 2 * logicalPage + 1] = "0000";
        endif;
        logicalPage = logicalPage + 1;
    endwhile;

    // Go through stack, heap of Disk Map table of current PID
    // Invalidate all entries
    alias diskMapEntry R3;
    alias index R4;
    diskMapEntry = DISK_MAP_TABLE + (currentPID * 10);
    index = 2;
    while (index < 10) do

        if ([diskMapEntry + index] != -1 && (index < 4 || index > 7)) then
            multipush (R1, R2, R3);
            R2 = [diskMapEntry + index];
            R3 = [SYSTEM_STATUS_TABLE + 1];
            R1 = RELEASE_BLOCK;
            call MEMORY_MANAGER;
            multipop (R1, R2, R3);
        endif;

        [diskMapEntry + index] = -1;

        index = index + 1;
    endwhile;

    return;

GetPcbEntry:
    alias PID R2;
    alias processTable R3;
    alias retVal R0;
    PID = 1;
    processTable = PROCESS_TABLE + (PID * 16);
    while ([processTable + 4] != TERMINATED && PID != 0) do
        PID = (PID + 1) % 16;
        processTable = PROCESS_TABLE + (PID * 16);
    endwhile;

    if (PID == 0) then
        retVal = -1;
        return;
    endif;

    [processTable + 1] = PID;
    [processTable + 4] = ALLOCATED;
    [processTable + 14] = PAGE_TABLE_BASE + (PID * 20);
    [processTable + 15] = 10;

    retVal = PID;
    return;